//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "SPTNetworkConnectivityControllerObserver.h"
#import "SPTVideoResourceLoaderInternalDelegate.h"

@class AVPlayer, AVPlayerItem, AVURLAsset, FBKVOController, NSDate, NSError, NSObject<OS_dispatch_queue>, NSString, NSTimer, SPTNetworkConnectivityController, SPTPlayerItemErrorLogEventFilter, SPTVideoAVFactory, SPTVideoCDNSelector, SPTVideoLogger, SPTVideoPlaybackState, SPTVideoPlayerSource, SPTVideoSubtitleSelector, SPTask;

@interface SPTVideoPlaybackSession : NSObject <SPTVideoResourceLoaderInternalDelegate, SPTNetworkConnectivityControllerObserver>
{
    _Bool _allowRoyaltyVideos;
    _Bool _cdnFallbackBasedOnAVPlayerErrorLogEnabled;
    _Bool _repeat;
    _Bool _muted;
    _Bool _seeking;
    _Bool _stalled;
    _Bool _catchingUp;
    _Bool _offline;
    _Bool _rebufferedAfterForegrounding;
    _Bool _sessionStartNotificationSent;
    _Bool _requireRetryToResume;
    float _playbackRate;
    id <SPTVideoPlaybackIdentity> _identity;
    SPTVideoLogger *_logger;
    double _videoAspectRatio;
    id <SPTVideoPlaybackSessionDelegate> _delegate;
    id <SPTVideoSubtitle> _preferredSubtitle;
    id <SPTVideoResourceLoaderInternal> _resourceLoader;
    NSObject<OS_dispatch_queue> *_resourceLoaderQueue;
    id <SPTVideoEventObserver> _notifierProxy;
    FBKVOController *_kvoController;
    SPTVideoPlayerSource *_playerSource;
    SPTNetworkConnectivityController *_connController;
    SPTVideoPlaybackState *_lastState;
    SPTVideoAVFactory *_playerItemFactory;
    SPTVideoCDNSelector *_cdnSelector;
    CDUnknownBlockType _subtitleSelectorFactory;
    SPTVideoSubtitleSelector *_subtitleSelector;
    SPTask *_manifestTask;
    AVURLAsset *_asset;
    AVPlayer *_player;
    AVPlayerItem *_playerItem;
    double _initialOffset;
    NSError *_error;
    double _lastSeekTime;
    NSDate *_lastSeekEventDate;
    id <SPTVideoSubtitle> _selectedSubtitle;
    long long _playerResetCount;
    NSTimer *_syncTimer;
    long long _volumeStep;
    NSObject *_periodicTimeObserver;
    NSObject<OS_dispatch_queue> *_periodicTimeObserverQueue;
    SPTPlayerItemErrorLogEventFilter *_playerItemErrorLogEventFilter;
}

@property(retain, nonatomic) SPTPlayerItemErrorLogEventFilter *playerItemErrorLogEventFilter; // @synthesize playerItemErrorLogEventFilter=_playerItemErrorLogEventFilter;
@property(nonatomic) _Bool requireRetryToResume; // @synthesize requireRetryToResume=_requireRetryToResume;
@property(nonatomic) _Bool sessionStartNotificationSent; // @synthesize sessionStartNotificationSent=_sessionStartNotificationSent;
@property(nonatomic) _Bool rebufferedAfterForegrounding; // @synthesize rebufferedAfterForegrounding=_rebufferedAfterForegrounding;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *periodicTimeObserverQueue; // @synthesize periodicTimeObserverQueue=_periodicTimeObserverQueue;
@property(retain, nonatomic) NSObject *periodicTimeObserver; // @synthesize periodicTimeObserver=_periodicTimeObserver;
@property(nonatomic) long long volumeStep; // @synthesize volumeStep=_volumeStep;
@property(retain, nonatomic) NSTimer *syncTimer; // @synthesize syncTimer=_syncTimer;
@property(nonatomic) long long playerResetCount; // @synthesize playerResetCount=_playerResetCount;
@property(retain, nonatomic) id <SPTVideoSubtitle> selectedSubtitle; // @synthesize selectedSubtitle=_selectedSubtitle;
@property(nonatomic) _Bool offline; // @synthesize offline=_offline;
@property(retain, nonatomic) NSDate *lastSeekEventDate; // @synthesize lastSeekEventDate=_lastSeekEventDate;
@property(nonatomic) double lastSeekTime; // @synthesize lastSeekTime=_lastSeekTime;
@property(nonatomic) _Bool catchingUp; // @synthesize catchingUp=_catchingUp;
@property(nonatomic) _Bool stalled; // @synthesize stalled=_stalled;
@property(nonatomic) _Bool seeking; // @synthesize seeking=_seeking;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(nonatomic) double initialOffset; // @synthesize initialOffset=_initialOffset;
@property(retain, nonatomic) AVPlayerItem *playerItem; // @synthesize playerItem=_playerItem;
@property(retain, nonatomic) AVPlayer *player; // @synthesize player=_player;
@property(retain, nonatomic) AVURLAsset *asset; // @synthesize asset=_asset;
@property(retain, nonatomic) SPTask *manifestTask; // @synthesize manifestTask=_manifestTask;
@property(retain, nonatomic) SPTVideoSubtitleSelector *subtitleSelector; // @synthesize subtitleSelector=_subtitleSelector;
@property(copy, nonatomic) CDUnknownBlockType subtitleSelectorFactory; // @synthesize subtitleSelectorFactory=_subtitleSelectorFactory;
@property(retain, nonatomic) SPTVideoCDNSelector *cdnSelector; // @synthesize cdnSelector=_cdnSelector;
@property(retain, nonatomic) SPTVideoAVFactory *playerItemFactory; // @synthesize playerItemFactory=_playerItemFactory;
@property(retain, nonatomic) SPTVideoPlaybackState *lastState; // @synthesize lastState=_lastState;
@property(retain, nonatomic) SPTNetworkConnectivityController *connController; // @synthesize connController=_connController;
@property(retain, nonatomic) SPTVideoPlayerSource *playerSource; // @synthesize playerSource=_playerSource;
@property(retain, nonatomic) FBKVOController *kvoController; // @synthesize kvoController=_kvoController;
@property(retain, nonatomic) id <SPTVideoEventObserver> notifierProxy; // @synthesize notifierProxy=_notifierProxy;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *resourceLoaderQueue; // @synthesize resourceLoaderQueue=_resourceLoaderQueue;
@property(retain, nonatomic) id <SPTVideoResourceLoaderInternal> resourceLoader; // @synthesize resourceLoader=_resourceLoader;
@property(nonatomic, getter=isMuted) _Bool muted; // @synthesize muted=_muted;
@property(nonatomic) _Bool repeat; // @synthesize repeat=_repeat;
@property(retain, nonatomic) id <SPTVideoSubtitle> preferredSubtitle; // @synthesize preferredSubtitle=_preferredSubtitle;
@property(nonatomic, getter=isCDNFallbackBasedOnAVPlayerErrorLogEnabled) _Bool cdnFallbackBasedOnAVPlayerErrorLogEnabled; // @synthesize cdnFallbackBasedOnAVPlayerErrorLogEnabled=_cdnFallbackBasedOnAVPlayerErrorLogEnabled;
@property(nonatomic) float playbackRate; // @synthesize playbackRate=_playbackRate;
@property(nonatomic) _Bool allowRoyaltyVideos; // @synthesize allowRoyaltyVideos=_allowRoyaltyVideos;
@property(nonatomic) __weak id <SPTVideoPlaybackSessionDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) double videoAspectRatio; // @synthesize videoAspectRatio=_videoAspectRatio;
@property(readonly, nonatomic) SPTVideoLogger *logger; // @synthesize logger=_logger;
@property(retain, nonatomic) id <SPTVideoPlaybackIdentity> identity; // @synthesize identity=_identity;
- (void).cxx_destruct;
- (void)networkConnectivityController:(id)arg1 didChangeForcedOffline:(_Bool)arg2;
- (void)videoPlaybackDidEndWithReason:(long long)arg1;
- (id)errorDebugDescriptionWithErrorDomain:(id)arg1 code:(long long)arg2 userInfo:(id)arg3;
- (id)playbackID;
- (double)durationForPlayer;
- (double)positionForPlayer;
- (_Bool)isBuffering;
- (void)refreshSelectedSubtitle;
- (void)markLastUsedCDNFail;
- (void)markLastUsedCDNOk;
- (void)resourceLoaderDidLoadDRMSession:(id)arg1;
- (void)resourceLoaderWillLoadDRMSession:(id)arg1;
- (void)resourceLoader:(id)arg1 willDownloadVideoSegment:(long long)arg2;
- (id)addPeriodicTimeObserver;
- (void)didEnterBackground;
- (void)willEnterForeground;
- (void)errorLogEntryAdded:(id)arg1;
- (void)accessLogEntryAdded:(id)arg1;
- (void)playerItemDidFailedToPlayToEndTime:(id)arg1;
- (void)playerItemDidStall:(id)arg1;
- (void)playerItemDidReachEnd:(id)arg1;
- (void)sendPlaybackError:(id)arg1;
- (void)sendStateUpdate;
- (void)sendStateUpdateForced:(_Bool)arg1;
- (void)refreshPlayerSynchronizationTimer;
- (void)synchronizePlayer;
- (void)kvo_itemLikelyToKeepUpChanged:(id)arg1 object:(id)arg2;
- (void)kvo_itemStatusChanged:(id)arg1 object:(id)arg2;
@property(nonatomic, getter=isFullscreen) _Bool fullscreen;
- (_Bool)isPaused;
- (void)assetFailedToPrepareForPlayback:(id)arg1;
- (void)refreshMetrics:(_Bool)arg1;
- (void)refreshAVStack;
- (void)fadeIn;
- (void)prepareAssetWithKeys:(id)arg1;
- (void)prepareAsset;
- (void)refreshPlayer;
- (void)resume;
- (void)pause;
- (double)duration;
- (double)currentTime;
- (id)availableSubtitles;
- (void)seekTo:(double)arg1 completion:(CDUnknownBlockType)arg2;
- (void)retrySession;
- (void)unloadPlayerAndResetState;
- (void)unloadSession:(id)arg1 nextIdentity:(id)arg2;
- (void)unloadPlayerItem;
- (void)loadSession;
- (void)dealloc;
- (id)initWithPlaybackIdentity:(id)arg1 notifierProxy:(id)arg2 resourceLoader:(id)arg3 logger:(id)arg4 playerSource:(id)arg5 networkConnectivityController:(id)arg6 playerItemFactory:(id)arg7 cndSelector:(id)arg8 subtitleSelectorFactory:(CDUnknownBlockType)arg9;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

