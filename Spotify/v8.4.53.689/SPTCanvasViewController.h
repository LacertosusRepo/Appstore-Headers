//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIViewController.h"

#import "SPTCanvasPlaybackManagerLoadDelegate.h"
#import "SPTCanvasStreamingPlaybackManagerLoadDelegate.h"
#import "SPTImageLoaderDelegate.h"
#import "SPTNowPlayingContainerIdleMonitorObserver.h"

@class NSString, NSURL, SPTCanvasAttributionView, SPTCanvasBackendService, SPTCanvasLoadEventLogger, SPTCanvasLoadStateTracker, SPTCanvasLoggingService, SPTCanvasModel, SPTCanvasPlaybackManager, SPTCanvasStreamingPlaybackManager, SPTCanvasTrackCheckerImplementation, SPTCanvasVideoView, UIActivityIndicatorView, UIImageView, UIView;

@interface SPTCanvasViewController : UIViewController <SPTImageLoaderDelegate, SPTCanvasPlaybackManagerLoadDelegate, SPTCanvasStreamingPlaybackManagerLoadDelegate, SPTNowPlayingContainerIdleMonitorObserver>
{
    _Bool _canvasContentAvailable;
    _Bool _shouldUseStreamingVideoPlayer;
    _Bool _shouldShowAttribution;
    _Bool _isIdle;
    SPTCanvasTrackCheckerImplementation *_trackChecker;
    id <SPTImageLoaderFactory> _imageLoaderFactory;
    SPTCanvasBackendService *_backendService;
    SPTCanvasLoggingService *_loggingService;
    SPTCanvasLoadEventLogger *_loadEventLogger;
    SPTCanvasLoadStateTracker *_loadStateTracker;
    id <SPTCanvasLoadStateUpdater> _canvasLoadStateUpdater;
    SPTCanvasPlaybackManager *_videoPlaybackManager;
    SPTCanvasVideoView *_videoView;
    SPTCanvasStreamingPlaybackManager *_streamingVideoPlaybackManager;
    id <SPTVideoPlayer> _streamingVideoPlayer;
    NSURL *_currentTrackURI;
    NSURL *_currentImageURL;
    NSURL *_currentArtistURI;
    NSString *_currentArtistName;
    SPTCanvasModel *_canvasModel;
    UIImageView *_imageView;
    id <SPTImageLoader> _imageLoader;
    id <SPTImageLoaderRequest> _canvasImageRequest;
    id <SPTImageLoaderRequest> _canvasPlaceholderImageRequest;
    id <SPTImageLoaderRequest> _avatarImageRequest;
    SPTCanvasAttributionView *_attributionView;
    UIActivityIndicatorView *_activityIndicatorView;
    id <SPTCanvasIdleMonitorObserverDelegate> _delegate;
}

@property(nonatomic) __weak id <SPTCanvasIdleMonitorObserverDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) _Bool isIdle; // @synthesize isIdle=_isIdle;
@property(nonatomic) _Bool shouldShowAttribution; // @synthesize shouldShowAttribution=_shouldShowAttribution;
@property(readonly, nonatomic) UIActivityIndicatorView *activityIndicatorView; // @synthesize activityIndicatorView=_activityIndicatorView;
@property(readonly, nonatomic) SPTCanvasAttributionView *attributionView; // @synthesize attributionView=_attributionView;
@property(retain, nonatomic) id <SPTImageLoaderRequest> avatarImageRequest; // @synthesize avatarImageRequest=_avatarImageRequest;
@property(retain, nonatomic) id <SPTImageLoaderRequest> canvasPlaceholderImageRequest; // @synthesize canvasPlaceholderImageRequest=_canvasPlaceholderImageRequest;
@property(retain, nonatomic) id <SPTImageLoaderRequest> canvasImageRequest; // @synthesize canvasImageRequest=_canvasImageRequest;
@property(retain, nonatomic) id <SPTImageLoader> imageLoader; // @synthesize imageLoader=_imageLoader;
@property(readonly, nonatomic) UIImageView *imageView; // @synthesize imageView=_imageView;
@property(retain, nonatomic) SPTCanvasModel *canvasModel; // @synthesize canvasModel=_canvasModel;
@property(retain, nonatomic) NSString *currentArtistName; // @synthesize currentArtistName=_currentArtistName;
@property(retain, nonatomic) NSURL *currentArtistURI; // @synthesize currentArtistURI=_currentArtistURI;
@property(retain, nonatomic) NSURL *currentImageURL; // @synthesize currentImageURL=_currentImageURL;
@property(retain, nonatomic) NSURL *currentTrackURI; // @synthesize currentTrackURI=_currentTrackURI;
@property(nonatomic) _Bool shouldUseStreamingVideoPlayer; // @synthesize shouldUseStreamingVideoPlayer=_shouldUseStreamingVideoPlayer;
@property(readonly, nonatomic) id <SPTVideoPlayer> streamingVideoPlayer; // @synthesize streamingVideoPlayer=_streamingVideoPlayer;
@property(retain, nonatomic) SPTCanvasStreamingPlaybackManager *streamingVideoPlaybackManager; // @synthesize streamingVideoPlaybackManager=_streamingVideoPlaybackManager;
@property(retain, nonatomic) SPTCanvasVideoView *videoView; // @synthesize videoView=_videoView;
@property(retain, nonatomic) SPTCanvasPlaybackManager *videoPlaybackManager; // @synthesize videoPlaybackManager=_videoPlaybackManager;
@property(retain, nonatomic) id <SPTCanvasLoadStateUpdater> canvasLoadStateUpdater; // @synthesize canvasLoadStateUpdater=_canvasLoadStateUpdater;
@property(readonly, nonatomic) SPTCanvasLoadStateTracker *loadStateTracker; // @synthesize loadStateTracker=_loadStateTracker;
@property(readonly, nonatomic) SPTCanvasLoadEventLogger *loadEventLogger; // @synthesize loadEventLogger=_loadEventLogger;
@property(readonly, nonatomic) SPTCanvasLoggingService *loggingService; // @synthesize loggingService=_loggingService;
@property(readonly, nonatomic) SPTCanvasBackendService *backendService; // @synthesize backendService=_backendService;
@property(readonly, nonatomic) id <SPTImageLoaderFactory> imageLoaderFactory; // @synthesize imageLoaderFactory=_imageLoaderFactory;
@property(readonly, nonatomic) SPTCanvasTrackCheckerImplementation *trackChecker; // @synthesize trackChecker=_trackChecker;
@property(nonatomic, getter=isCanvasContentAvailable) _Bool canvasContentAvailable; // @synthesize canvasContentAvailable=_canvasContentAvailable;
- (void).cxx_destruct;
- (void)streamingPlaybackManager:(id)arg1 didFailToLoadAssetURL:(id)arg2 entityURI:(id)arg3 playbackOption:(long long)arg4;
- (void)streamingPlaybackManager:(id)arg1 didLoadAssetURL:(id)arg2 entityURI:(id)arg3 playbackOption:(long long)arg4;
- (void)streamingPlaybackManager:(id)arg1 willLoadAssetURL:(id)arg2 entityURI:(id)arg3 playbackOption:(long long)arg4;
- (void)streamingPlaybackManager:(id)arg1 streamingStartedManifestID:(id)arg2 entityURI:(id)arg3 playbackOption:(long long)arg4;
- (void)playbackManager:(id)arg1 didFailToLoadAssetURL:(id)arg2 entityURI:(id)arg3 playbackOption:(long long)arg4;
- (void)playbackManager:(id)arg1 didLoadAssetURL:(id)arg2 entityURI:(id)arg3 playbackOption:(long long)arg4;
- (void)playbackManager:(id)arg1 willLoadAssetURL:(id)arg2 entityURI:(id)arg3 playbackOption:(long long)arg4;
- (void)streamingDidStartForManifestId:(id)arg1 entityURI:(id)arg2 playbackOption:(long long)arg3;
- (void)assetDownloadDidFailForAssetURL:(id)arg1 entityURI:(id)arg2 playbackOption:(long long)arg3;
- (void)assetDownloadDidFinishForAssetURL:(id)arg1 entityURI:(id)arg2 playbackOption:(long long)arg3;
- (void)assetDownloadDidStartForAssetURL:(id)arg1 entityURI:(id)arg2 playbackOption:(long long)arg3;
- (_Bool)canvasModelHasSameManifestId:(id)arg1 entityURI:(id)arg2 playbackOption:(long long)arg3;
- (_Bool)canvasModelHasSameAssetURL:(id)arg1 entityURI:(id)arg2 playbackOption:(long long)arg3;
- (id)canvasModelWithContext:(id)arg1;
- (void)imageLoader:(id)arg1 didLoadImage:(id)arg2 forURL:(id)arg3 loadTime:(double)arg4 context:(id)arg5;
- (void)imageLoader:(id)arg1 didFailToLoadImageForURL:(id)arg2 error:(id)arg3 context:(id)arg4;
- (void)hideLoadingIndicator;
- (void)showLoadingIndicator;
- (void)updateAttributionView;
- (void)setAttributionViewAvatarImage:(id)arg1;
- (void)idlePeriodDidEnd;
- (void)idlePeriodDidBegin;
- (_Bool)shouldUseStreamingPlaybackManager:(id)arg1;
- (_Bool)isVideoStreamingContent:(id)arg1;
- (_Bool)isVideoContent:(id)arg1;
- (_Bool)shouldRepeatVideo:(id)arg1;
- (long long)playbackOption:(id)arg1;
@property(readonly, nonatomic) UIView *streamingVideoView;
- (struct CGSize)avatarSize;
- (id)canvasImageContextForModel:(id)arg1;
- (id)canvasImageContext;
- (id)artistAvatarImageContext;
- (id)createVideoPlayer;
- (void)setupPlaybackWithVideoManager:(id)arg1 playerFeature:(id)arg2;
- (void)setupStreamingPlaybackWithVideoManager:(id)arg1 playerFeature:(id)arg2;
- (void)updateAccessoryWithArtistURI:(id)arg1 artistName:(id)arg2;
- (void)playVideoWithModel:(id)arg1;
- (void)playStreamingVideoWithModel:(id)arg1;
- (void)loadVideoContentWithModel:(id)arg1;
- (void)loadImageContentWithModel:(id)arg1;
- (void)loadCanvasPlaceholder;
- (void)resetWithTrack:(id)arg1 imageURL:(id)arg2;
- (void)setVisible:(_Bool)arg1;
- (void)pausePlayback;
- (void)resumePlayback;
- (void)viewWillDisappear:(_Bool)arg1;
- (void)viewDidAppear:(_Bool)arg1;
- (void)setupConstraints;
- (void)viewDidLoad;
- (id)initWithCanvasTrackChecker:(id)arg1 loadStateTracker:(id)arg2 imageLoaderFactory:(id)arg3 videoManager:(id)arg4 loggingService:(id)arg5 loadEventLogger:(id)arg6 idleMonitorDelegate:(id)arg7 backendService:(id)arg8 streamingVideoPlayer:(id)arg9 shouldUseStreamingVideoPlayer:(_Bool)arg10 playerFeature:(id)arg11;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

