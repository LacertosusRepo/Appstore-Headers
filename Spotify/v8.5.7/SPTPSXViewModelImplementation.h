//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled May 25 2019 19:12:25).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "SPTFollowShelfFactoryDelegate-Protocol.h"
#import "SPTFormatListPlatformManagerOfflineDelegate-Protocol.h"
#import "SPTFormatListPlatformRemoteControlPolicyManagerObserver-Protocol.h"
#import "SPTPSXViewModel-Protocol.h"
#import "SPTPersonalisedSetsUnbanContextMenuActionDelegate-Protocol.h"
#import "SPTPlayerObserver-Protocol.h"

@class NSArray, NSDate, NSString, NSURL, SPSession, SPTPSXArtistRecommendationsDataLoader, SPTPSXArtistRecommendationsList, SPTPlayerState;
@protocol SPTCollectionSortingEntityManager, SPTContextMenuPresenterFactory, SPTFeedbackManager, SPTFollowShelfFactory, SPTFollowShelfService, SPTFormatListModel, SPTFormatListPlatformManager, SPTFormatListPlatformRemoteControlPolicyManager, SPTFormatListPlatformResolver, SPTPSXTestManager, SPTPSXViewModelBanningDelegate, SPTPSXViewModelDelegate, SPTPlayer, SPTPlaylistModel, SPTPlaylistPlatformDataLoaderRequestToken, SPTPlaylistPlatformPlaylistDataLoader;

@interface SPTPSXViewModelImplementation : NSObject <SPTFormatListPlatformManagerOfflineDelegate, SPTPersonalisedSetsUnbanContextMenuActionDelegate, SPTPlayerObserver, SPTFormatListPlatformRemoteControlPolicyManagerObserver, SPTFollowShelfFactoryDelegate, SPTPSXViewModel>
{
    _Bool _availableOffline;
    _Bool _loaded;
    _Bool _isFollowed;
    _Bool _followShelfEnabled;
    _Bool _ascendingSortOrder;
    NSString *_name;
    NSURL *_entityURL;
    NSURL *_ownerImageURL;
    NSURL *_entityImageURL;
    id <SPTPSXViewModelDelegate> _delegate;
    id <SPTPSXViewModelBanningDelegate> _banningDelegate;
    NSString *_freeformDescription;
    unsigned long long _offlineAvailability;
    NSString *_ownerName;
    double _totalDuration;
    NSDate *_lastModifiedTime;
    unsigned long long _followerCount;
    NSString *_madeForString;
    id <SPTPlayer> _player;
    NSURL *_URL;
    id <SPTFormatListPlatformResolver> _resolver;
    id <SPTFormatListPlatformManager> _platformManager;
    id <SPTCollectionSortingEntityManager> _sortingEntityManager;
    SPSession *_session;
    id <SPTPlaylistPlatformPlaylistDataLoader> _playlistPlatformPlaylistDataLoader;
    SPTPSXArtistRecommendationsDataLoader *_artistRecommendationsDataLoader;
    id <SPTContextMenuPresenterFactory> _contextMenuPresenterFactory;
    id <SPTPSXTestManager> _testManager;
    id <SPTFormatListPlatformRemoteControlPolicyManager> _formatListPlatformRemoteControlPolicyManager;
    id <SPTPlaylistModel> _playlistModel;
    id <SPTFeedbackManager> _feedbackManager;
    id <SPTFollowShelfService> _followShelfService;
    id <SPTFollowShelfFactory> _followShelfFactory;
    NSString *_madeForName;
    id <SPTFormatListModel> _formatListModel;
    unsigned long long _sortColumn;
    NSString *_textFilter;
    NSArray *_tracks;
    SPTPlayerState *_currentPlayerState;
    id <SPTPlaylistPlatformDataLoaderRequestToken> _playlistRequestToken;
    SPTPSXArtistRecommendationsList *_recsList;
}

@property(retain, nonatomic) SPTPSXArtistRecommendationsList *recsList; // @synthesize recsList=_recsList;
@property(retain, nonatomic) id <SPTPlaylistPlatformDataLoaderRequestToken> playlistRequestToken; // @synthesize playlistRequestToken=_playlistRequestToken;
@property(retain, nonatomic) SPTPlayerState *currentPlayerState; // @synthesize currentPlayerState=_currentPlayerState;
@property(retain, nonatomic) NSArray *tracks; // @synthesize tracks=_tracks;
@property(copy, nonatomic) NSString *textFilter; // @synthesize textFilter=_textFilter;
@property(nonatomic) _Bool ascendingSortOrder; // @synthesize ascendingSortOrder=_ascendingSortOrder;
@property(nonatomic) unsigned long long sortColumn; // @synthesize sortColumn=_sortColumn;
@property(retain, nonatomic) id <SPTFormatListModel> formatListModel; // @synthesize formatListModel=_formatListModel;
@property(copy, nonatomic) NSString *madeForName; // @synthesize madeForName=_madeForName;
@property(nonatomic, getter=isFollowShelfEnabled) _Bool followShelfEnabled; // @synthesize followShelfEnabled=_followShelfEnabled;
@property(retain, nonatomic) id <SPTFollowShelfFactory> followShelfFactory; // @synthesize followShelfFactory=_followShelfFactory;
@property(readonly, nonatomic) id <SPTFollowShelfService> followShelfService; // @synthesize followShelfService=_followShelfService;
@property(readonly, nonatomic) id <SPTFeedbackManager> feedbackManager; // @synthesize feedbackManager=_feedbackManager;
@property(readonly, nonatomic) id <SPTPlaylistModel> playlistModel; // @synthesize playlistModel=_playlistModel;
@property(readonly, nonatomic) id <SPTFormatListPlatformRemoteControlPolicyManager> formatListPlatformRemoteControlPolicyManager; // @synthesize formatListPlatformRemoteControlPolicyManager=_formatListPlatformRemoteControlPolicyManager;
@property(readonly, nonatomic) id <SPTPSXTestManager> testManager; // @synthesize testManager=_testManager;
@property(readonly, nonatomic) id <SPTContextMenuPresenterFactory> contextMenuPresenterFactory; // @synthesize contextMenuPresenterFactory=_contextMenuPresenterFactory;
@property(retain, nonatomic) SPTPSXArtistRecommendationsDataLoader *artistRecommendationsDataLoader; // @synthesize artistRecommendationsDataLoader=_artistRecommendationsDataLoader;
@property(readonly, nonatomic) id <SPTPlaylistPlatformPlaylistDataLoader> playlistPlatformPlaylistDataLoader; // @synthesize playlistPlatformPlaylistDataLoader=_playlistPlatformPlaylistDataLoader;
@property(readonly, nonatomic) __weak SPSession *session; // @synthesize session=_session;
@property(readonly, nonatomic) id <SPTCollectionSortingEntityManager> sortingEntityManager; // @synthesize sortingEntityManager=_sortingEntityManager;
@property(readonly, nonatomic) id <SPTFormatListPlatformManager> platformManager; // @synthesize platformManager=_platformManager;
@property(readonly, nonatomic) id <SPTFormatListPlatformResolver> resolver; // @synthesize resolver=_resolver;
@property(readonly, nonatomic) NSURL *URL; // @synthesize URL=_URL;
@property(readonly, nonatomic) id <SPTPlayer> player; // @synthesize player=_player;
@property(copy, nonatomic) NSString *madeForString; // @synthesize madeForString=_madeForString;
@property(nonatomic) unsigned long long followerCount; // @synthesize followerCount=_followerCount;
@property(retain, nonatomic) NSDate *lastModifiedTime; // @synthesize lastModifiedTime=_lastModifiedTime;
@property(nonatomic) _Bool isFollowed; // @synthesize isFollowed=_isFollowed;
@property(nonatomic) double totalDuration; // @synthesize totalDuration=_totalDuration;
@property(copy, nonatomic) NSString *ownerName; // @synthesize ownerName=_ownerName;
@property(nonatomic) unsigned long long offlineAvailability; // @synthesize offlineAvailability=_offlineAvailability;
@property(retain, nonatomic) NSString *freeformDescription; // @synthesize freeformDescription=_freeformDescription;
@property(nonatomic, getter=isLoaded) _Bool loaded; // @synthesize loaded=_loaded;
@property(nonatomic) __weak id <SPTPSXViewModelBanningDelegate> banningDelegate; // @synthesize banningDelegate=_banningDelegate;
@property(nonatomic) __weak id <SPTPSXViewModelDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) NSURL *entityImageURL; // @synthesize entityImageURL=_entityImageURL;
@property(retain, nonatomic) NSURL *ownerImageURL; // @synthesize ownerImageURL=_ownerImageURL;
@property(nonatomic) _Bool availableOffline; // @synthesize availableOffline=_availableOffline;
@property(retain, nonatomic) NSURL *entityURL; // @synthesize entityURL=_entityURL;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (void)remoteControlPolicyManagerDislikeButtonPressed:(id)arg1 track:(id)arg2 contextURI:(id)arg3 identifier:(id)arg4;
- (void)remoteControlPolicyManagerUnlikeButtonPressed:(id)arg1 track:(id)arg2 contextURI:(id)arg3;
- (void)remoteControlPolicyManagerLikeButtonPressed:(id)arg1 track:(id)arg2 contextURI:(id)arg3;
- (void)remoteControlPolicyManagerDidFinishDislikeFeedback:(id)arg1 track:(id)arg2 contextURI:(id)arg3 identifier:(id)arg4 error:(id)arg5;
- (void)remoteControlPolicyManagerDidFinishUnlikeFeedback:(id)arg1 track:(id)arg2 contextURI:(id)arg3 error:(id)arg4;
- (void)remoteControlPolicyManagerDidFinishLikeFeedback:(id)arg1 track:(id)arg2 contextURI:(id)arg3 error:(id)arg4;
- (void)resyncPlaylistIfNecessary:(id)arg1;
- (void)didDismissFollowItem:(id)arg1;
- (void)didDismissFollowItems;
- (void)unbanContextMenuActionShouldPerformAction:(id)arg1;
@property(readonly, nonatomic, getter=isFollowShelfAvailable) _Bool followShelfAvailable;
@property(readonly, nonatomic, getter=isOfflineToggleAvailable) _Bool offlineToggleAvailable;
- (_Bool)isTrackPlaying:(id)arg1;
- (void)unbanTrack:(id)arg1;
- (_Bool)isTrackDisabled:(id)arg1;
- (id)itemModels;
- (void)playWithOptions:(id)arg1;
- (id)constructPlaylistContextMetadata;
- (void)formatListPlatformManagerDidChangeOfflineStatus:(id)arg1;
- (void)setSortOrderWithColumn:(unsigned long long)arg1 ascending:(_Bool)arg2;
- (void)setTextFilter:(id)arg1 onCompletion:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) NSArray *supportedSortColumns;
- (void)makeAvailableOffline:(_Bool)arg1;
- (void)playTracksShuffled;
- (void)playTrack:(id)arg1;
- (id)contextMenuActionsForFactory:(id)arg1;
- (id)itemModelAtIndex:(long long)arg1;
- (void)fillOptionsForPlaylistTracks:(id)arg1;
- (void)reloadTracks;
- (void)requestChangeFollowStatus:(_Bool)arg1;
- (void)requestArtistRecommendations;
- (void)loadPlaylist;
- (id)initWithURL:(id)arg1 player:(id)arg2 resolver:(id)arg3 platformManager:(id)arg4 sortingEntityManager:(id)arg5 session:(id)arg6 playlistPlatformPlaylistDataLoader:(id)arg7 artistRecommendationsDataLoader:(id)arg8 contextMenuPresenterFactory:(id)arg9 testManager:(id)arg10 formatListPlatformRemoteControlPolicyManager:(id)arg11 playlistModel:(id)arg12 feedbackManager:(id)arg13 followShelfService:(id)arg14 isFollowShelfEnabled:(_Bool)arg15;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

