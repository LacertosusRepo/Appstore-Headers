//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled May 14 2020 10:06:36).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "BMEventObserver-Protocol.h"

@class NSMutableArray, NSString, SPTAudioFormatEvent, SPTVideoBufferEvent, SPTVideoFormatEvent, SPTVideoPlayRange, SPTVideoPlayRangeState;
@protocol BMPlaybackIdentity, OS_dispatch_queue;

@interface SPTVideoBaseTracker : NSObject <BMEventObserver>
{
    struct atomic_flag _initialBufferingFlag;
    struct atomic_flag _playbackStartedFlag;
    _Bool _messageSent;
    _Bool _seekOngoing;
    id <BMPlaybackIdentity> _identity;
    SPTVideoPlayRangeState *_currentPlayRangeState;
    NSMutableArray *_playedRanges;
    double _duration;
    NSMutableArray *_videoFormatEvents;
    NSMutableArray *_audioFormatEvents;
    long long _bytesDownloaded;
    SPTVideoBufferEvent *_currentBufferEvent;
    SPTVideoFormatEvent *_currentVideoFormatEvent;
    SPTAudioFormatEvent *_currentAudioFormatEvent;
    SPTVideoPlayRange *_startTimeRange;
    SPTVideoPlayRange *_manifestLoadTimeRange;
    SPTVideoPlayRange *_encryptionLoadTimeRange;
    NSMutableArray *_bufferEvents;
    NSMutableArray *_seekEvents;
}

@property(nonatomic) _Bool seekOngoing; // @synthesize seekOngoing=_seekOngoing;
@property(retain, nonatomic) NSMutableArray *seekEvents; // @synthesize seekEvents=_seekEvents;
@property(retain, nonatomic) NSMutableArray *bufferEvents; // @synthesize bufferEvents=_bufferEvents;
@property(retain, nonatomic) SPTVideoPlayRange *encryptionLoadTimeRange; // @synthesize encryptionLoadTimeRange=_encryptionLoadTimeRange;
@property(retain, nonatomic) SPTVideoPlayRange *manifestLoadTimeRange; // @synthesize manifestLoadTimeRange=_manifestLoadTimeRange;
@property(retain, nonatomic) SPTVideoPlayRange *startTimeRange; // @synthesize startTimeRange=_startTimeRange;
@property(retain, nonatomic) SPTAudioFormatEvent *currentAudioFormatEvent; // @synthesize currentAudioFormatEvent=_currentAudioFormatEvent;
@property(retain, nonatomic) SPTVideoFormatEvent *currentVideoFormatEvent; // @synthesize currentVideoFormatEvent=_currentVideoFormatEvent;
@property(retain, nonatomic) SPTVideoBufferEvent *currentBufferEvent; // @synthesize currentBufferEvent=_currentBufferEvent;
@property(nonatomic) _Bool messageSent; // @synthesize messageSent=_messageSent;
@property(nonatomic) long long bytesDownloaded; // @synthesize bytesDownloaded=_bytesDownloaded;
@property(retain, nonatomic) NSMutableArray *audioFormatEvents; // @synthesize audioFormatEvents=_audioFormatEvents;
@property(retain, nonatomic) NSMutableArray *videoFormatEvents; // @synthesize videoFormatEvents=_videoFormatEvents;
@property(nonatomic) double duration; // @synthesize duration=_duration;
@property(retain, nonatomic) NSMutableArray *playedRanges; // @synthesize playedRanges=_playedRanges;
@property(retain, nonatomic) SPTVideoPlayRangeState *currentPlayRangeState; // @synthesize currentPlayRangeState=_currentPlayRangeState;
@property(retain, nonatomic) id <BMPlaybackIdentity> identity; // @synthesize identity=_identity;
- (void).cxx_destruct;
- (long long)currentDeviceOrientation;
- (void)endCurrentAudioFormatEventAtPosition:(double)arg1;
- (void)endCurrentVideoFormatEventAtPosition:(double)arg1;
- (void)startNewAudioFormatEvent:(id)arg1 atPosition:(double)arg2;
- (void)startNewVideoFormatEvent:(id)arg1 atPosition:(double)arg2;
- (void)endCurrentBufferEventWithTimestamp:(double)arg1;
- (void)startNewBufferEventWithType:(long long)arg1 timestamp:(double)arg2;
- (void)endCurrentPlayRangeAtPosition:(double)arg1 andStartNextRangeAtPosition:(double)arg2;
- (void)endCurrentPlayRangeAtPosition:(double)arg1;
- (void)didChangeSeekableWindow:(id)arg1 timestamp:(double)arg2;
- (void)didChangeSubtitle:(id)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didDropVideoFrames:(unsigned long long)arg1 timestamp:(double)arg2;
- (void)didTransferBytes:(long long)arg1 forBitrate:(double)arg2 withElapsedTime:(double)arg3 timestamp:(double)arg4;
- (void)didChangeAudioFormat:(id)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didChangeVideoFormat:(id)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didChangeSurface:(id)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didChangeBackgroundState:(_Bool)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didFailWithRecoverableError:(id)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didFailWithFatalError:(id)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didEndPlaybackWithReason:(long long)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)willSeekToPosition:(double)arg1 fromPosition:(double)arg2 timestamp:(double)arg3;
- (void)didChangePlaybackSpeed:(float)arg1 atPosition:(double)arg2 timestamp:(double)arg3;
- (void)didResumeWithTimestamp:(double)arg1;
- (void)didPauseAtPosition:(double)arg1 timestamp:(double)arg2;
- (void)didChangeDuration:(double)arg1 timestamp:(double)arg2;
- (void)didBecomeReadyAtPosition:(double)arg1 timestamp:(double)arg2;
- (void)didStartBufferingAtPosition:(double)arg1 timestamp:(double)arg2;
- (void)didLoadEncriptionKeyOfType:(long long)arg1 timestamp:(double)arg2;
- (void)willLoadEncryptionKeyWithTimestamp:(double)arg1;
- (void)didLoadManifestWithAvailableSubtitles:(id)arg1 timestamp:(double)arg2;
- (void)willLoadManifestWithTimestamp:(double)arg1;
- (void)willEndPlaybackWithNextIdentity:(id)arg1 timestamp:(double)arg2;
- (void)didCreatePlaybackInBackground:(_Bool)arg1 timestamp:(double)arg2;
@property(readonly, nonatomic) double startBitrate;
@property(readonly, nonatomic) _Bool isEncrypted;
- (id)calculatePlaybackStatisticsWithPlayedRanges:(id)arg1;
- (id)calculatePlaybackStatisticsAtPosition:(double)arg1;
- (id)calculatePlaybackStatistics;
- (id)initWithIdentity:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

