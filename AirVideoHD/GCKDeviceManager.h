//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled May 25 2019 19:12:25).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "GCKCastSecureSocketDelegate-Protocol.h"
#import "GCKDeviceAuthChannelDelegate-Protocol.h"
#import "GCKDeviceSetupChannelDelegate-Protocol.h"
#import "GCKGuestModePairingViewControllerDelegate-Protocol.h"
#import "GCKHeartbeatChannelDelegate-Protocol.h"
#import "GCKMultizoneControlChannelDelegate-Protocol.h"
#import "GCKProximityInfoChannelDelegate-Protocol.h"
#import "GCKReceiverControlChannelDelegate-Protocol.h"

@class GCKApplicationMetadata, GCKCastSecureSocket, GCKClientCertificate, GCKConnectionControlChannel, GCKDevice, GCKDeviceAuthChannel, GCKDeviceSetupChannel, GCKGuestModePairingViewController, GCKHeartbeatChannel, GCKJoinOptions, GCKLaunchOptions, GCKMultizoneControlChannel, GCKProximityInfoChannel, GCKReceiverControlChannel, GCKReconnectStrategy, GNSAudioModem, NSError, NSMutableArray, NSMutableDictionary, NSString, NSTimer;
@protocol GCKDeviceManagerDelegate, GCKDeviceManagerDelegateInternal, GCKDeviceManagerMultizoneDelegate, GNSAudioModemOperation;

@interface GCKDeviceManager : NSObject <GCKGuestModePairingViewControllerDelegate, GCKCastSecureSocketDelegate, GCKDeviceAuthChannelDelegate, GCKReceiverControlChannelDelegate, GCKHeartbeatChannelDelegate, GCKDeviceSetupChannelDelegate, GCKMultizoneControlChannelDelegate, GCKProximityInfoChannelDelegate>
{
    NSString *_sourceID;
    NSMutableDictionary *_channels;
    NSMutableArray *_internalChannels;
    GCKCastSecureSocket *_socket;
    long long _nextRequestID;
    double _inactivityTimeout;
    NSString *_connectedAppTransportID;
    NSString *_applicationIDToConnect;
    NSString *_applicationIDToJoin;
    NSString *_sessionIDToJoin;
    GCKJoinOptions *_joinOptions;
    NSString *_pausedAppID;
    NSString *_pausedSessionID;
    long long _joinAppRequestID;
    long long _stopAppRequestID;
    long long _statusRequestID;
    _Bool _isRegisteredForAppStateNotifications;
    _Bool _shouldLaunchIfJoinFails;
    _Bool _ignoreAppStateNotifications;
    GCKLaunchOptions *_launchOptionsIfJoinFails;
    NSError *_disconnectionError;
    NSTimer *_reconnectTimer;
    _Bool _suspensionNotified;
    _Bool _wasConnected;
    _Bool _connectionSuspended;
    _Bool _reconnectAfterDisconnected;
    long long _connectionSessionID;
    long long _applicationConnectionSessionID;
    GCKClientCertificate *_clientCertificate;
    GCKReconnectStrategy *_reconnectStrategy;
    GCKGuestModePairingViewController *_guestModeDialog;
    GNSAudioModem *_audioModem;
    id <GNSAudioModemOperation> _audioTokenListenOperation;
    _Bool _isReconnecting;
    _Bool _deviceMuted;
    float _deviceVolume;
    long long _connectionState;
    long long _applicationConnectionState;
    GCKDevice *_device;
    id <GCKDeviceManagerDelegate> _delegate;
    long long _activeInputStatus;
    long long _standbyStatus;
    NSString *_applicationSessionID;
    GCKApplicationMetadata *_applicationMetadata;
    NSString *_applicationStatusText;
    id <GCKDeviceManagerMultizoneDelegate> _multizoneDelegate;
    id <GCKDeviceManagerDelegateInternal> _internalDelegate;
    long long _hashedDeviceID;
    GCKConnectionControlChannel *_connectionControlChannel;
    GCKDeviceAuthChannel *_deviceAuthChannel;
    GCKHeartbeatChannel *_heartbeatChannel;
    GCKReceiverControlChannel *_receiverControlChannel;
    GCKProximityInfoChannel *_proximityInfoChannel;
    GCKDeviceSetupChannel *_deviceSetupChannel;
    GCKMultizoneControlChannel *_multizoneControlChannel;
}

@property(retain, nonatomic) GCKMultizoneControlChannel *multizoneControlChannel; // @synthesize multizoneControlChannel=_multizoneControlChannel;
@property(retain, nonatomic) GCKDeviceSetupChannel *deviceSetupChannel; // @synthesize deviceSetupChannel=_deviceSetupChannel;
@property(retain, nonatomic) GCKProximityInfoChannel *proximityInfoChannel; // @synthesize proximityInfoChannel=_proximityInfoChannel;
@property(retain, nonatomic) GCKReceiverControlChannel *receiverControlChannel; // @synthesize receiverControlChannel=_receiverControlChannel;
@property(retain, nonatomic) GCKHeartbeatChannel *heartbeatChannel; // @synthesize heartbeatChannel=_heartbeatChannel;
@property(retain, nonatomic) GCKDeviceAuthChannel *deviceAuthChannel; // @synthesize deviceAuthChannel=_deviceAuthChannel;
@property(retain, nonatomic) GCKConnectionControlChannel *connectionControlChannel; // @synthesize connectionControlChannel=_connectionControlChannel;
@property(nonatomic) long long hashedDeviceID; // @synthesize hashedDeviceID=_hashedDeviceID;
@property(nonatomic) __weak id <GCKDeviceManagerDelegateInternal> internalDelegate; // @synthesize internalDelegate=_internalDelegate;
@property(nonatomic) __weak id <GCKDeviceManagerMultizoneDelegate> multizoneDelegate; // @synthesize multizoneDelegate=_multizoneDelegate;
@property(copy, nonatomic) NSString *applicationStatusText; // @synthesize applicationStatusText=_applicationStatusText;
@property(copy, nonatomic) GCKApplicationMetadata *applicationMetadata; // @synthesize applicationMetadata=_applicationMetadata;
@property(copy, nonatomic) NSString *applicationSessionID; // @synthesize applicationSessionID=_applicationSessionID;
@property(nonatomic) long long standbyStatus; // @synthesize standbyStatus=_standbyStatus;
@property(nonatomic) long long activeInputStatus; // @synthesize activeInputStatus=_activeInputStatus;
@property(nonatomic) _Bool deviceMuted; // @synthesize deviceMuted=_deviceMuted;
@property(nonatomic) float deviceVolume; // @synthesize deviceVolume=_deviceVolume;
@property(nonatomic) __weak id <GCKDeviceManagerDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) GCKDevice *device; // @synthesize device=_device;
@property(nonatomic) _Bool isReconnecting; // @synthesize isReconnecting=_isReconnecting;
@property(nonatomic) long long applicationConnectionState; // @synthesize applicationConnectionState=_applicationConnectionState;
@property(nonatomic) long long connectionState; // @synthesize connectionState=_connectionState;
- (void).cxx_destruct;
- (void)onCancelled;
- (void)onListenStopped;
- (void)continueListenStarted;
- (void)onListenStarted;
- (void)onPINAvailable:(id)arg1;
- (void)notifyDidRemoveMultizoneDevice:(id)arg1;
- (void)notifyDidUpdateMultizoneDevice:(id)arg1;
- (void)notifyDidAddMultizoneDevice:(id)arg1;
- (void)notifyDidReceiveMultizoneStatus:(id)arg1;
- (void)notifyRequest:(long long)arg1 failedWithError:(id)arg2;
- (void)notifyDidReceiveApplicationMetadata;
- (void)notifyDidDisconnectFromApplicationWithError:(id)arg1;
- (void)notifyDidFailToStopApplicationWithError:(id)arg1;
- (void)notifyDidStopApplication;
- (void)notifyDidFailToConnectToApplicationWithError:(id)arg1;
- (void)notifyDidConnectToApplication:(id)arg1 withSessionID:(id)arg2 launchedApplication:(_Bool)arg3;
- (void)notifyConnectionResumedWithJoinedState:(_Bool)arg1;
- (void)notifyConnectionSuspendedWithReason:(long long)arg1;
- (void)notifyDidDisconnectWithError:(id)arg1;
- (void)notifyDidFailToConnectWithError:(id)arg1;
- (void)notifyDidConnect;
- (void)proximityInfoChannel:(id)arg1 didReceiveDeviceInfoWithDeviceID:(id)arg2 friendlyName:(id)arg3 forBSSID:(id)arg4;
- (void)multizoneControlChannel:(id)arg1 didUpdateDevice:(id)arg2;
- (void)multizoneControlChannel:(id)arg1 didRemoveDeviceWithID:(id)arg2;
- (void)multizoneControlChannel:(id)arg1 didAddDevice:(id)arg2;
- (void)multizoneControlChannel:(id)arg1 requestDidFailWithID:(long long)arg2 reason:(id)arg3;
- (void)multizoneControlChannel:(id)arg1 didReceiveMultizoneStatus:(id)arg2;
- (void)heartbeatChannelDidTimeout:(id)arg1;
- (void)deviceAuthChannel:(id)arg1 didFailToAuthenticateWithError:(id)arg2;
- (void)deviceAuthChannelDidAuthenticate:(id)arg1;
- (void)deviceSetupChannel:(id)arg1 didFailToReceiveDeviceConfigurationWithID:(long long)arg2 error:(id)arg3;
- (void)deviceSetupChannel:(id)arg1 didReceiveDeviceConfiguration:(id)arg2;
- (void)receiverControlChannel:(id)arg1 didReplaceRequestWithID:(long long)arg2;
- (void)receiverControlChannel:(id)arg1 requestDidFailWithID:(long long)arg2 error:(id)arg3;
- (void)receiverControlChannel:(id)arg1 didReceiveAppAvailability:(id)arg2;
- (void)receiverControlChannel:(id)arg1 didReceiveActiveInputStatus:(long long)arg2;
- (void)receiverControlChannel:(id)arg1 volumeDidChangeToLevel:(float)arg2 isMuted:(_Bool)arg3;
- (void)receiverControlChannel:(id)arg1 didReceiveReceiverStatus:(id)arg2 applicationStatus:(id)arg3 requestID:(long long)arg4;
- (void)receiverControlChannelDidStopCastApplication:(id)arg1;
- (void)receiverControlChannel:(id)arg1 didFailToLaunchCastApplicationWithError:(id)arg2;
- (void)receiverControlChannel:(id)arg1 didLaunchCastApplication:(id)arg2;
- (void)handleConnectionError:(id)arg1;
- (void)castSocket:(id)arg1 didDisconnectWithError:(id)arg2;
- (void)castSocket:(id)arg1 didReceiveMessage:(id)arg2;
- (void)castSocket:(id)arg1 didFailToConnectWithError:(id)arg2;
- (void)castSocket:(id)arg1 didConnectWithPeerSecTrust:(struct __SecTrust *)arg2;
- (long long)setDeviceMuted:(_Bool)arg1 forMultizoneDevice:(id)arg2;
- (long long)setDeviceVolume:(float)arg1 forMultizoneDevice:(id)arg2;
- (long long)requestMultizoneStatus;
- (void)connectToReceiverChannel;
- (void)finishConnectFlow;
- (long long)generateRequestID;
- (long long)sendBinaryMessage:(id)arg1 withNamespace:(id)arg2 toDestinationID:(id)arg3;
- (long long)sendBinaryMessage:(id)arg1 withNamespace:(id)arg2;
- (long long)sendTextMessage:(id)arg1 withNamespace:(id)arg2 toDestinationID:(id)arg3;
- (long long)sendTextMessage:(id)arg1 withNamespace:(id)arg2;
- (long long)setMuted:(_Bool)arg1;
- (long long)setVolume:(float)arg1;
- (long long)stopApplicationWithSessionID:(id)arg1;
- (long long)stopApplication;
- (_Bool)leaveApplication;
- (long long)joinApplicationInternalUnchecked:(id)arg1 sessionID:(id)arg2;
- (long long)joinApplication:(id)arg1 sessionID:(id)arg2 joinOptions:(id)arg3;
- (long long)joinApplication:(id)arg1 sessionID:(id)arg2;
- (long long)joinApplication:(id)arg1;
- (long long)launchApplication:(id)arg1 relaunchIfRunning:(_Bool)arg2;
- (long long)launchApplication:(id)arg1 withLaunchOptions:(id)arg2;
- (long long)launchApplication:(id)arg1;
- (void)clearReconnectState;
- (void)reconnectTimerDidFire:(id)arg1;
- (_Bool)scheduleReconnect;
@property(nonatomic) double reconnectTimeout;
- (_Bool)updateApplicationMetadata:(id)arg1;
- (void)clearDeviceState;
- (void)disconnectFromApplicationAndNotifyWithError:(id)arg1;
- (void)connectAndNotifyDidConnectToApplication:(id)arg1 launchedApplication:(_Bool)arg2;
- (_Bool)connectToApplication:(id)arg1 connectionType:(long long)arg2;
- (_Bool)isInForeground;
- (_Bool)isInBackground;
- (void)disconnectChannel:(id)arg1;
- (void)connectChannel:(id)arg1;
- (_Bool)clearStopState;
- (_Bool)clearJoinState;
- (void)disconnectInternalUncheckedWithExplicitFlag:(_Bool)arg1;
- (void)disconnectWithError:(id)arg1 isExplicit:(_Bool)arg2;
- (void)connectVisibleDeviceWithPin:(id)arg1 pinType:(int)arg2;
- (void)connectGuestModeWithPin:(id)arg1 pinType:(int)arg2;
- (void)connectInternalUnchecked;
- (void)connectWithInactivityTimeout:(double)arg1;
- (void)appWillEnterForeground;
- (void)appDidEnterBackground;
- (void)unregisterForAppStateNotifications;
- (void)registerForAppStateNotifications;
- (long long)sendMessageWithNamespace:(id)arg1 toDestinationID:(id)arg2 stringPayload:(id)arg3 binaryPayload:(id)arg4;
- (long long)requestAvailabilityForAppIDs:(id)arg1;
- (long long)requestDeviceConfiguration;
- (long long)requestDeviceStatus;
- (_Bool)addInternalChannel:(id)arg1;
- (_Bool)removeChannel:(id)arg1;
- (_Bool)addChannel:(id)arg1;
- (void)disconnectWithLeave:(_Bool)arg1;
- (void)disconnect;
- (void)connect;
@property(readonly, nonatomic) _Bool isConnectedToApp;
- (_Bool)isConnecting;
@property(readonly, nonatomic) _Bool isConnected;
- (void)dealloc;
- (id)initWithDevice:(id)arg1 clientPackageName:(id)arg2 ignoreAppStateNotifications:(_Bool)arg3 reconnectStrategy:(id)arg4;
- (id)initWithDevice:(id)arg1 clientPackageName:(id)arg2 ignoreAppStateNotifications:(_Bool)arg3;
- (id)initWithDevice:(id)arg1 clientPackageName:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

