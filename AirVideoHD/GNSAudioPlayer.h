//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled May 25 2019 19:12:25).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class MPVolumeView, NSData;
@protocol OS_dispatch_queue;

@interface GNSAudioPlayer : NSObject
{
    _Bool _systemVolumeChanged;
    float _volume;
    float _systemVolume;
    int _pcmDataLength;
    int _pcmDataStartTransitionLength;
    float _sampleRate;
    NSData *_token;
    struct OpaqueAudioQueue *_audioQueue;
    NSObject<OS_dispatch_queue> *_audioPlayerQueue;
    MPVolumeView *_volumeView;
    char *_pcmData;
    char *_pcmDataStartTransition;
}

+ (void)convertSamples:(vector_f9ed6fc8 *)arg1 toPcm:(char **)arg2 length:(int *)arg3;
@property(nonatomic) float sampleRate; // @synthesize sampleRate=_sampleRate;
@property(nonatomic) int pcmDataStartTransitionLength; // @synthesize pcmDataStartTransitionLength=_pcmDataStartTransitionLength;
@property(nonatomic) char *pcmDataStartTransition; // @synthesize pcmDataStartTransition=_pcmDataStartTransition;
@property(nonatomic) int pcmDataLength; // @synthesize pcmDataLength=_pcmDataLength;
@property(nonatomic) char *pcmData; // @synthesize pcmData=_pcmData;
@property(retain, nonatomic) MPVolumeView *volumeView; // @synthesize volumeView=_volumeView;
@property(nonatomic) _Bool systemVolumeChanged; // @synthesize systemVolumeChanged=_systemVolumeChanged;
@property(nonatomic) float systemVolume; // @synthesize systemVolume=_systemVolume;
@property(nonatomic) float volume; // @synthesize volume=_volume;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *audioPlayerQueue; // @synthesize audioPlayerQueue=_audioPlayerQueue;
@property(nonatomic) struct OpaqueAudioQueue *audioQueue; // @synthesize audioQueue=_audioQueue;
@property(retain, nonatomic) NSData *token; // @synthesize token=_token;
- (void).cxx_destruct;
- (void)restoreSystemVolume;
- (float)computePlayerVolumeAlteringSystemVolumeIfNecessary;
- (void)playSamples:(char *)arg1 startTransition:(char *)arg2;
- (void)fillAndEnqueueBuffer:(struct AudioQueueBuffer *)arg1 queue:(struct OpaqueAudioQueue *)arg2 isFirstBuffer:(_Bool)arg3;
- (void)stopPlaying;
- (void)startPlayingWithToken:(id)arg1 volume:(float)arg2 encoding:(id)arg3;
- (void)freePcmData;
- (_Bool)isPlaying;
- (void)dealloc;
- (id)init;

@end

